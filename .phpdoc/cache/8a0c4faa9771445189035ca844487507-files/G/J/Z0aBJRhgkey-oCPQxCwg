1751920065
8a0c4faa9771445189035ca844487507-phpdoc%3Aeb7a9899a7709202a78e8cc482aad916-4dadd1c00ef4cd3bfc3fdb1c40036890
s:7932:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjIyOiJ2Q29udHJvbEFzaXN0ZW5jaWEucGhwIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjRkYWRkMWMwMGVmNGNkM2JmYzNmZGIxYzQwMDM2ODkwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NDE6InNyYy91c2VyL2FwcC92aWV3cy92Q29udHJvbEFzaXN0ZW5jaWEucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czo0MDU1OiI8P3BocA0KICAgIC8qKg0KICAgICAqIFZpc3RhIGRlbCBwYW5lbCBkZSBjb250cm9sIGRlIGFzaXN0ZW5jaWENCiAgICAgKg0KICAgICAqIE11ZXN0cmEgZWwgcGFuZWwgZGUgY29udHJvbCBkZSBhc2lzdGVuY2lhIHkgbGEgdGFibGEgZGUgYWx1bW5vcyBjb24gdW4gY2hlY2tib3ggcGFyYSBtYXJjYXIgc2kgYXNpc3RlIG8gbm8NCiAgICAgKiANCiAgICAgKi8NCj8+DQo8IURPQ1RZUEUgaHRtbD4NCjxodG1sIGxhbmc9ImVzIj4NCjxoZWFkPg0KICAgIDx0aXRsZT5QYW5lbCBNb25pdG9yIC0gQ29udHJvbCBBc2lzdGVuY2lhPC90aXRsZT4NCiAgICA8bGluayByZWw9Imljb24iIGhyZWY9ImFzc2V0cy9pbWcvZmF2aWNvbi1pbWcucG5nIiB0eXBlPSJpbWFnZS94LWljb24iPg0KPC9oZWFkPg0KPGJvZHk+DQogICAgPD9waHAgcmVxdWlyZV9vbmNlKCdsYXlvdXRzL2hlYWRlclVzZXIucGhwJyk7ID8+DQogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCiAgICAgICAgPD9waHANCiAgICAgICAgICAgIGlmIChpc3NldCgkX0dFVFsnbWVucyddKSAmJiAkX0dFVFsnbWVucyddID09PSAnYicpIHsNCiAgICAgICAgICAgICAgICBlY2hvICc8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1zdWNjZXNzIGFsZXJ0LWRpc21pc3NpYmxlIGZhZGUgc2hvdyB3LTUwIG14LWF1dG8iIHJvbGU9ImFsZXJ0Ij4nDQogICAgICAgICAgICAgICAgICAgIC4nQWx1bW5vIGluc2VydGFkbyBjb3JyZWN0YW1lbnRlLicNCiAgICAgICAgICAgICAgICAgICAgLiAnPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4tY2xvc2UiIGRhdGEtYnMtZGlzbWlzcz0iYWxlcnQiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj4nDQogICAgICAgICAgICAgICAgICAgIC4gJzwvZGl2Pic7DQogICAgICAgICAgICB9DQogICAgICAgID8+DQogICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IGNvbC1zbS0xMiI+DQogICAgICAgICAgICAgICAgPD9waHANCiAgICAgICAgICAgICAgICAgICAgaWYgKCRkYXRvc1snZXNEaWFMZWN0aXZvJ10pIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZW1wdHkoJGRhdG9zWydhbHVtbm9zJ10pKSB7DQogICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciBtYi00Ij4NCiAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJkLWlubGluZS1ibG9jayBiZy1jdXN0b20tc2Vjb25kYXJ5IHRleHQtd2hpdGUgcHgtNCBweS0yIHJvdW5kZWQgdy1hdXRvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRpYXNTZW1hbmEgPSBbJ0RPTUlOR08nLCAnTFVORVMnLCAnTUFSVEVTJywgJ01Jw4lSQ09MRVMnLCAnSlVFVkVTJywgJ1ZJRVJORVMnLCAnU8OBQkFETyddOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtZXNlcyA9IFsnRU5FUk8nLCAnRkVCUkVSTycsICdNQVJaTycsICdBQlJJTCcsICdNQVlPJywgJ0pVTklPJywgJ0pVTElPJywgJ0FHT1NUTycsICdTRVBUSUVNQlJFJywgJ09DVFVCUkUnLCAnTk9WSUVNQlJFJywgJ0RJQ0lFTUJSRSddOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmZWNoYSA9IG5ldyBEYXRlVGltZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJGRpYXNTZW1hbmFbJGZlY2hhLT5mb3JtYXQoJ3cnKV0uJyAnLiRmZWNoYS0+Zm9ybWF0KCdkJykuJyBERSAnLiRtZXNlc1skZmVjaGEtPmZvcm1hdCgnbicpIC0gMV0uJyAnLiAkZmVjaGEtPmZvcm1hdCgnWScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8IS0tIFRhYmxhIGRlIGFzaXN0ZW5jaWEgLS0+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtcmVzcG9uc2l2ZSI+DQogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtc20gdGFibGUtYXNpc3RlbmNpYSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImJnLWN1c3RvbS1saWdodCBwZS0wIGNvbHVtbmEtbm9tYnJlIj5OT01CUkUgREVMIEFMVU1OTzwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iYmctY3VzdG9tLWxpZ2h0IHRleHQtY2VudGVyIHBzLTIgY29sdW1uYS1hc2lzdGUiPkFTSVNURTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkZGF0b3NbJ2FsdW1ub3MnXSBhcyAkYWx1bW5vKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzx0cj4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8dGQgY2xhc3M9InB5LTEgcGUtMCBjb2x1bW5hLW5vbWJyZSI+Jy4kYWx1bW5vWydhcGVsbGlkb3NBbHVtbm8nXS4nICwgJy4kYWx1bW5vWydub21icmVBbHVtbm8nXS4nPC90ZD4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8dGQgY2xhc3M9InRleHQtY2VudGVyIHB5LTEgcHMtMiBjb2x1bW5hLWFzaXN0ZSI+JzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGlucHV0IHR5cGU9ImNoZWNrYm94IiBjbGFzcz0iZm9ybS1jaGVjay1pbnB1dCBjb250cm9sLWFzaXN0ZW5jaWEiJzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnIGRhdGEtaWQ9IicgLiAkYWx1bW5vWydpZEFsdW1ubyddIC4gJyInOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvIGluX2FycmF5KCRhbHVtbm9bJ2lkQWx1bW5vJ10sICRkYXRvc1snYXNpc3RlbmNpYXMnXSkgPyAnIGNoZWNrZWQnIDogJyc7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJz4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8L3RkPic7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzwvdHI+JzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPD9waHANCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyB0ZXh0LWNlbnRlciI+Tm8gaGF5IGFsdW1ub3MgcmVnaXN0cmFkb3MgcGFyYSBtb3N0cmFyLjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1pbmZvIHRleHQtY2VudGVyIj5Ib3kgbm8gZXMgdW4gZMOtYSBsZWN0aXZvLjwvZGl2Pic7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICA/Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA1LjMuMy9kaXN0L2pzL2Jvb3RzdHJhcC5idW5kbGUubWluLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0ianMvdmlld3MvY29udHJvbEFzaXN0ZW5jaWEuanMiPjwvc2NyaXB0Pg0KPC9ib2R5Pg0KPC9odG1sPiI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDA6IlZpc3RhIGRlbCBwYW5lbCBkZSBjb250cm9sIGRlIGFzaXN0ZW5jaWEiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MTA2OiJNdWVzdHJhIGVsIHBhbmVsIGRlIGNvbnRyb2wgZGUgYXNpc3RlbmNpYSB5IGxhIHRhYmxhIGRlIGFsdW1ub3MgY29uIHVuIGNoZWNrYm94IHBhcmEgbWFyY2FyIHNpIGFzaXN0ZSBvIG5vIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQiOjI6e3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2UiO3M6MDoiIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlQWxpYXNlcyI7YTowOnt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";